import mongoose from "mongoose";
import { createSchema, Type } from 'ts-mongoose';
import Posts from "./PostModel";

const UserSchema = createSchema({
  //Add UUID generated by firebase here
  Username: Type.mixed({ required: true, unique: true }),
  FirstName: Type.string({ required: true, trim: true }),
  LastName: Type.string({ required: true, trim: true }),
  UniversityId: Type.objectId({ ref: "Universities", required: true }),
  Posts: [Posts],
  Total_Posts: Type.number({ default: 0 }),
  Age: Type.number(),
  Sex: Type.string(),
  ProfileUrl: Type.mixed(),
  EmailId: Type.mixed({ required: true, unique: true }),
  IsAmbassador: Type.boolean({ default: false }),
  Followers: [Type.objectId({ ref: "Users" })],
  Following: [Type.objectId({ ref: "Users" })],
  TotalFollowers: Type.number({ default: 0 }),
  TotalFollowing: Type.number({ default: 0 }),
  ClubInterests: [mongoose.Types.ObjectId],
  TotalClubInterests: Type.number({ default: 0 }),
});

UserSchema.virtual("fullName")
  .get(function (this: any) {
    return this.firstName + this.lastName;
  })
  .set(function (this: any, fullName: string) {
    const [firstName, lastName] = fullName.split(" ");
    this.set({ firstName, lastName });
  });

UserSchema.virtual("ValidateEmail").get(function (this: any) {
  if (/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(this.EmailId)) {
    return 1;
  }
  return 0;
});

UserSchema.methods.UniversityInfo = function (this: any, callback: any) {
  return this.model("Users").populate("UniversityId").find({}, callback);
};

export default mongoose.model("User", UserSchema);
